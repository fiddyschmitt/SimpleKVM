using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Windows.Forms;
using SimpleKVM.Displays;
using System.Linq;
using SimpleKVM.Rules.Actions;
using SimpleKVM.GUI.Actions;
using IAction = SimpleKVM.Rules.Actions.IAction;
using SimpleKVM.Configuration;

namespace SimpleKVM.GUI
{
    public partial class UcSelectMonitorSource : UserControl, IValidate, IActionCreator
    {
        public UcSelectMonitorSource()
        {
            InitializeComponent();

            Controls
                .OfType<Label>()
                .ToList()
                .ForEach(label =>
                {
                    label.MouseClick += (s, e) =>
                    {
                        OnMouseClick(e);
                    };
                });
        }

        public Monitor? Monitor { get; protected set; }
        int OriginalSourceId;

        public void DisplayMonitor(string autogeneratedName, Monitor monitor, int sourceIdToSelect)
        {
            Monitor = monitor;
            OriginalSourceId = sourceIdToSelect;

            lblMonitorName.Text = autogeneratedName;

            //var tooltip = new ToolTip();
            //tooltip.SetToolTip(lblMonitorName, monitor.MonitorUniqueId);

            var currentSource = monitor.GetCurrentSource();

            var monitorItems = monitor
                                    .ValidSources
                                    .Select(sourceId =>
                                    {
                                        var sourceName = SourceIdToName(sourceId, monitor.Model, Form1.Config?.Overrides?.MonitorOverrides);

                                        if (sourceId == currentSource)
                                        {
                                            sourceName += " (Active)";
                                        }

                                        return new
                                        {
                                            SourceName = sourceName,
                                            SourceId = sourceId
                                        };
                                    })
                                    .ToList();

            monitorItems.Add(new
            {
                SourceName = "Leave unchanged",
                SourceId = -1
            });

            cmbSources.DisplayMember = "SourceName";
            cmbSources.ValueMember = "SourceId";
            cmbSources.DataSource = monitorItems;

            cmbSources.SelectedIndex = monitorItems
                                        .Select((monitorItem, index) => new
                                        {
                                            MonitorItem = monitorItem,
                                            Index = index
                                        })
                                        .FirstOrDefault(monitorItem => monitorItem.MonitorItem.SourceId == sourceIdToSelect)
                                        ?.Index ?? 0;
        }

        public static string SourceIdToName(int sourceId, string model, List<MonitorOverride>? monitorOverrides)
        {
            //https://en.wikipedia.org/wiki/Monitor_Control_Command_Set
            //https://milek7.pl/ddcbacklight/mccs.pdf

            string sourceName = sourceId switch
            {
                -1 => "Leave unchanged",
                1 => "VGA 1",
                2 => "VGA 2",
                3 => "DVI 1",
                4 => "DVI 2",
                5 => "Composite video 1",
                6 => "Composite video 2",
                7 => "S-Video 1",
                8 => "S-Video 2",
                9 => "Tuner 1",
                10 => "Tuner 2",
                11 => "Tuner 3",
                12 => "Component video (YPrPb/YCrCb) 1",
                13 => "Component video (YPrPb/YCrCb) 2",
                14 => "Component video (YPrPb/YCrCb) 3",
                15 => "DisplayPort 1",
                16 => "DisplayPort 2",
                17 => "HDMI 1",
                18 => "HDMI 2",
                _ => $"{sourceId}",
            };

            //check if the user has overriden the Display Name for this SourceId, by using the config file overrides
            sourceName = monitorOverrides?
                            .FirstOrDefault(mon => mon.Model.Equals(model, StringComparison.OrdinalIgnoreCase))?
                            .SourceDisplayNames
                            .FirstOrDefault(srcOvr => srcOvr.SourceId == sourceId)?
                            .NewDisplayName ?? sourceName;

            return sourceName;
        }

        public List<IAction> GetAction()
        {
            var result = new List<IAction>();
            if (Monitor != null)
            {
                var selectedSourceId = (cmbSources.SelectedValue as int?) ?? OriginalSourceId;

                var newAction = new SetMonitorSourceAction(Monitor, selectedSourceId);
                result.Add(newAction);
            }

            return result;
        }

        public List<ValidationResult> ValidateData()
        {
            var result = new List<ValidationResult>();
            return result;
        }
    }
}
